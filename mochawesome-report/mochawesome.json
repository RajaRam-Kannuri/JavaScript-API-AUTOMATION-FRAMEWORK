{
  "stats": {
    "suites": 2,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2023-02-11T11:10:01.389Z",
    "end": "2023-02-11T11:10:03.125Z",
    "duration": 1736,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "85c315a5-094b-49fe-876b-739b6a68613c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f300ae4e-892f-44a9-bd5e-25bd33cae2e5",
          "title": "Verify Candidate Response Schema - Test Suite",
          "fullFile": "/Users/rajaram/Documents/JavaScript-API-AUTOMATION-FRAMEWORK/specs/Candidate_SchemaValidate_TestCase.js",
          "file": "/specs/Candidate_SchemaValidate_TestCase.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify Candidate Response JSON Schema using chai Assertions",
              "fullTitle": "Verify Candidate Response Schema - Test Suite Verify Candidate Response JSON Schema using chai Assertions",
              "timedOut": false,
              "duration": 1191,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let readData = `${testData.BaseURL}/api/candidate`\n            \n            currentResponse = await Get_Candidate(readData);\n\n            expect(currentResponse.statusCode).to.equal(200);\n            \n            currentResponseBody = JSON.parse(currentResponse.body);\n            \n            expect(currentResponseBody).to.be.an('array');\n            expect(currentResponseBody[0]).to.have.property(\"plateNo\");\n            expect(currentResponseBody[0]).to.have.property(\"driverName\");\n            expect(currentResponseBody[0]).to.have.property(\"lat\");\n            expect(currentResponseBody[0]).to.have.property(\"lng\");\n            expect(currentResponseBody[0]).to.have.property(\"location\");\n            expect(currentResponseBody[0]).to.have.property(\"lastUpdated\");",
              "err": {},
              "uuid": "2c926709-3fa5-4fcc-9eb7-e2b2323df2e4",
              "parentUUID": "f300ae4e-892f-44a9-bd5e-25bd33cae2e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify JSON Schema Api using tv4 dependency",
              "fullTitle": "Verify Candidate Response Schema - Test Suite Verify JSON Schema Api using tv4 dependency",
              "timedOut": false,
              "duration": 180,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let readData = `${testData.BaseURL}/api/candidate`\n            \n            currentResponse = await Get_Candidate(readData);\n            expect(currentResponse.statusCode).to.equal(200);\n            \n            currentResponseBody = JSON.parse(currentResponse.body);\n            \n            expect(currentResponseBody).to.be.an('array');\n            var schema = {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"plateNo\": { \"type\": \"string\" },\n                    \"driverName\": { \"type\": \"string\" },\n                    \"lat\":  {\"type\":\"number\"},\n                    \"lng\":  {\"type\":\"number\"},\n                    \"location\":{\"type\":\"string\"},\n                    \"imageURL\":{\"type\":\"string\"},\n                    \"lastUpdated\": {\"type\": \"string\", \"format\": \"date-time\"}\n                },\n                \"required\": [\"plateNo\", \"driverName\", \"lat\",\"lng\",\"location\",\"lastUpdated\"]\n            };\n            expect(currentResponseBody).to.be.an('array');\n            for (var i = 0; i < currentResponseBody.length; i++) {\n                var result = tv4.validate(currentResponseBody[i], schema);\n                expect(result).to.be.true;\n            }\n                    \n            //expect(currentResponseBody.data[0]).to.include.any.keys( 'state_code');",
              "err": {},
              "uuid": "4c9ad752-32a0-45de-946b-48409ca8408a",
              "parentUUID": "f300ae4e-892f-44a9-bd5e-25bd33cae2e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Candidate Response JSON Schema using chai Assertions - Negative Test Case",
              "fullTitle": "Verify Candidate Response Schema - Test Suite Verify Candidate Response JSON Schema using chai Assertions - Negative Test Case",
              "timedOut": false,
              "duration": 177,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let readData = `${testData.BaseURL}/api/candidate`\n            \n            currentResponse = await Get_Candidate(readData);\n\n            expect(currentResponse.statusCode).to.equal(200);\n            \n            currentResponseBody = JSON.parse(currentResponse.body);\n            \n            expect(currentResponseBody).to.be.an('array');\n            expect(currentResponseBody[0]).to.not.have.property(\"id\");\n            expect(currentResponseBody[0]).to.not.have.property(\"name\");\n            expect(currentResponseBody[0]).to.not.have.property(\"@#$@\");\n            expect(currentResponseBody[0]).to.not.have.property(\"////\");\n            expect(currentResponseBody[0]).to.not.have.property(\"/\");\n            expect(currentResponseBody[0]).to.not.have.property(\"^\");",
              "err": {},
              "uuid": "b95b249f-f0bb-4988-9572-a5d13e96d64d",
              "parentUUID": "f300ae4e-892f-44a9-bd5e-25bd33cae2e5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2c926709-3fa5-4fcc-9eb7-e2b2323df2e4",
            "4c9ad752-32a0-45de-946b-48409ca8408a",
            "b95b249f-f0bb-4988-9572-a5d13e96d64d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1548,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "9552f8f5-5303-4c89-9572-6fb81551cf8e",
          "title": "Sorting and Validating the Candidate API response using lastUpdated descending",
          "fullFile": "/Users/rajaram/Documents/JavaScript-API-AUTOMATION-FRAMEWORK/specs/Candidate_Sorting.js",
          "file": "/specs/Candidate_Sorting.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify Sorting and Validating the Candidate API",
              "fullTitle": "Sorting and Validating the Candidate API response using lastUpdated descending Verify Sorting and Validating the Candidate API",
              "timedOut": false,
              "duration": 184,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let readData = `${testData.BaseURL}/api/candidate`\n            \n        currentResponse = await Get_Candidate(readData);\n        expect(currentResponse.statusCode).to.equal(200);\n            \n        currentResponseBody = JSON.parse(currentResponse.body);\n        var candidates = currentResponseBody;\n        candidates = Array.from(candidates);\n        candidates.sort(function (a, b) {\n          return new Date(b.lastUpdated) - new Date(a.lastUpdated);\n        });\n        for (let i = 0; i < candidates.length - 1; i++) {\n            const current = candidates[i];\n            const next = candidates[i + 1];\n            expect(new Date(current.lastUpdated)).to.be.at.least(new Date(next.lastUpdated));\n        }",
              "err": {},
              "uuid": "a150fd1f-914a-447d-98ab-ec6872d1de60",
              "parentUUID": "9552f8f5-5303-4c89-9572-6fb81551cf8e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a150fd1f-914a-447d-98ab-ec6872d1de60"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 184,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}